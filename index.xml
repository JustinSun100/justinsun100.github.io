<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>青的博客</title>
    <link>http://sunheqing.top/</link>
    <description>Recent content on 青的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Tue, 18 Feb 2020 10:40:13 +0800</lastBuildDate>
    
	<atom:link href="http://sunheqing.top/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vue搭建项目及版本区别</title>
      <link>http://sunheqing.top/posts/vue%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%8F%8A%E7%89%88%E6%9C%AC%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Tue, 18 Feb 2020 10:40:13 +0800</pubDate>
      
      <guid>http://sunheqing.top/posts/vue%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%8F%8A%E7%89%88%E6%9C%AC%E5%8C%BA%E5%88%AB/</guid>
      <description>如何搭建一个 Vue 项目 使用 @vue/cli 搭建项目  安装@vue/cli
yarn global add @vue/cli  通过vue &amp;ndash;version命令来验证有没有安装成功
 创建项目
vue create 项目名 yarn serve //预览服务   在创建项目时有一些选项根据自己的需求选择，也可以在codesandbox 中创建项目,然后将项目下载下来。
使用 codesandebox 搭建项目：  进入网址codesandbox ，这里要注意不能登录，因为登录之后就只能创建 50 个项目，不登陆可以一直创建 点击创建一个 vue 项目  导出项目，这里导出的时压缩文件，解压后就是我们的项目了   好了我们已经成功创建好项目了，下面介绍一下版本的区别
版本区别 完整版 Vue.js  可以直接在 html 和 template 标签中得到视图内容 对于初学者而言更清晰易懂  非完整版 Vue.runtime.js  不能直接从 html 或 template 得到视图要用 js 构建视图 代码体积小，大概为完整版的 70%，节省了空间 通过 render 函数将数据渲染到视图中  注意：</description>
    </item>
    
    <item>
      <title>浅析MVC</title>
      <link>http://sunheqing.top/posts/%E6%B5%85%E6%9E%90mvc/</link>
      <pubDate>Wed, 12 Feb 2020 15:52:26 +0800</pubDate>
      
      <guid>http://sunheqing.top/posts/%E6%B5%85%E6%9E%90mvc/</guid>
      <description>MVC 是一种架构设计模式 1、MVC 的三个对象分别是做什么的  M-model(数据模型)，负责操作所有的数据 V-view(视图)，负责所有的 UI 界面 C-controller(控制器)，负责其他  2、EventBus 有哪些 API，是做什么用的 EventBus 是用来对象间通信的
EventBus 的 API
 EventBus.on-&amp;gt;监听事件 EventBus.trigger-&amp;gt;触发事件 EventBus.off-&amp;gt;
update(){ eventBus.trigger(x) } eventBus.on(x,function)   3、表驱动编程是做什么的  表驱动编程是一种编程模式，从表里面查找信息而不是使用重复的语句和复杂的逻辑语句，当复杂度较低的情况时，用逻辑语句更简洁，但如果复杂度较高，使用表驱动编程无疑能节省很多的空间。
 表里里可以存数据，也可以存指令，或函数对象等都可以。
  4、总结 好的代码总是将复杂的逻辑以分层的方式降低单个层次上的复杂度。复杂与简单有一个相互转化的过程。
模块化能让代码清晰起来，每个模块互不干扰，无论是自己修改还是别人修改都是有利的</description>
    </item>
    
    <item>
      <title>JQuery基本原理</title>
      <link>http://sunheqing.top/posts/jquery%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</link>
      <pubDate>Thu, 07 Nov 2019 13:27:06 +0800</pubDate>
      
      <guid>http://sunheqing.top/posts/jquery%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</guid>
      <description>jQuery jQuery 毫无疑问是 JS 历史上最经典的 js 库，直至今日，很多网站依然在使用 jQuery 它的许多思想值得我们开发者学习，但是想要掌握它也并不容易，经典的思想有哪些呢？
一、jQuery 如何获取元素 要知道 jQuery 是一个封装起来的库，简写就是\$()，获取想要操作的元素，通过选择表达式
例如：
$(&amp;quot;#test&amp;quot;); //获取id为test的元素 $(&amp;quot;div.demo&amp;quot;); //获取类名为class的div元素 $(&amp;quot;tr:odd&amp;quot;); //选择表格的奇数行（jQuery特有的选择式） $(&amp;quot;div:gt(2)&amp;quot;); // 选择所有的div元素，除了前三个（jQuery特有的选择式）  二、jQuery 的链式操作是怎么样的 jQuery 设计思想之一，就是最终选中网页元素以后，以链条的形式写出来并操作，原因是：
 jQuery 是一个特殊的函数 jQuery 的返回值是一个对象
$(&amp;quot;div&amp;quot;) .find(&amp;quot;p&amp;quot;) .eq(2) .html(&amp;quot;Hello&amp;quot;); //由于返回值是一个对象所以就可以在对象上继续操作   三、jQuery 如何创建元素 创建元素非常的简单只需要将元素直接传如 jQuery 的构造函数中就可以例如：
$(&amp;quot;&amp;lt;div&amp;gt;创建一个新的div&amp;lt;/div&amp;gt;&amp;quot;); //创建一个新的div $(&amp;quot;ul.first&amp;quot;).append.$(&amp;quot;&amp;lt;li&amp;gt;new li&amp;lt;/li&amp;gt;&amp;quot;); //创建一个新的li插入class为first的ul中  四、如何移动元素 想把一个元素移动到另一个元素前面有两种方法。
第一种方法是 insertAfter()，把 div 元素移动 p 元素后面。
$(&amp;quot;div&amp;quot;).insertAfter($(&amp;quot;p&amp;quot;));  第二种方法是 after()，把 p 元素加到 div 元素前面。
$(&amp;quot;p&amp;quot;).after($(&amp;quot;div&amp;quot;));  这两种方法是有区别的,第一种方法返回的是 div 元素，第二种方法返回的是 p 元素</description>
    </item>
    
    <item>
      <title>Js函数的执行时机</title>
      <link>http://sunheqing.top/posts/js%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</link>
      <pubDate>Fri, 11 Oct 2019 22:40:04 +0800</pubDate>
      
      <guid>http://sunheqing.top/posts/js%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</guid>
      <description>js函数 函数分类  具名函数
function fn(x,y){ return x+y }  匿名函数
let a=function(x,y){ return x+y }  箭头函数
let f1=x=&amp;gt;x*x	//一句可以省略花括号 let f2=(x,y)=&amp;gt;{ console.log(x) return x+y }	//两个参数必须用括号括起来，两行语句要用花括号括起来，两行语句以上return是不能省略的  构造函数
let f =new Function(&#39;x&#39;,&#39;y&#39;,&#39;return x+y&#39;)	//Function就是构造函数    所有函数都是Function构造出来的 包括Object、Array、Function  调用时机 函数必须调用才会执行
调用时机很重要，时机不同，结果不同
例子1 let i=0; for(i=0;i&amp;lt;6;i++){ setTimeout(()=&amp;gt;{ console.log(i) },0) }  这段代码执行的结果是6个6 为什么是6个6呢？ 我们分析一下，按照我们的逻辑来看应该是0，1，2，3，4，5啊
原因：setTimeout是定时器，意思时设定一个时间再执行，这里定时器的时间是0ms，但是 实际是定时器还是有时间的，这段代码表达的意思是，做完手头的事情以后再马上执行定时器，所以当for循环完成之后，马上执行定时器里面的内容，所以是当i循环到6之后再执行定时器，所以就在控制台上打出来了6个6
例子2 for(let i=0;i&amp;lt;6;i++){ setTimeout(()=&amp;gt;{ console.log(i) },0) }  这段代码的结果是0，1，2，3，4，5
在我们看来这两段代码是一样的啊，为什么结果不一样呢？ 原因：在上一个例子中i是全局变量。所以i只有一个所以它会一直被加到6才会执行，而在第二个例子中let i让每次循环都创建了一个i所以就有6个i这样当计时器执行的时候，i就等于0，1，2，3，4，5</description>
    </item>
    
    <item>
      <title>JS对象的基本用法</title>
      <link>http://sunheqing.top/posts/js%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</link>
      <pubDate>Fri, 04 Oct 2019 21:49:40 +0800</pubDate>
      
      <guid>http://sunheqing.top/posts/js%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</guid>
      <description>对象：  无序的数据集合 键值对的集合  1.声明对象的两种语法 let obj={&#39;name&#39;:frank,&#39;age&#39;:18}  我们通常用这种方法定义对象
let obj=new Object{&#39;name&#39;:frank,&#39;age&#39;:18}  这是定义对象的标准语句，说明语句是通过Object构造函数定义的
注意键值一定是字符串（并且会自己将其变为字符串），但是如果键值用方括号[]括起来，那么键值就是变量的值
let p1=&#39;name&#39;; let obj={p1:frank}; //键值是&#39;p1&#39; let obj={[p1]:frank}; //键值是&#39;name&#39;  2.如何删除对象的属性 var obj={&#39;name&#39;:&#39;frank&#39;,&#39;age&#39;:18}  删除对象的属性，看一下下面两种方法
obj.name=undefined //将name属性设为undefined，name属性存在，删除属性值 delete obj.name //将name属性删除，删除属性名  3.如何查看对象的属性 查看自身所有属性 Object keys(obj); //打出所有的键值 Object values(obj); //打出所有的属性值 Object entries(obj); //以数组形式打出所有的键值对  查看自身+共有属性 console.dir(obj); obj.__proto__ //不推荐  判断一个属性是自身还是共有属性 obj.hasOwnProperty(&#39;toString&#39;) //false  查看属性的值： 1. obj[&#39;name&#39;]; //新人推荐使用 2. obj.name； //熟练后使用  obj[name]是错误的写法，因为[name]是变量。
4.如何修改或添加对象的属性 直接赋值 let obj={name:&#39;frank&#39;} obj.</description>
    </item>
    
    <item>
      <title>JavaScript的基本语法</title>
      <link>http://sunheqing.top/posts/javascript%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Sun, 22 Sep 2019 17:14:08 +0800</pubDate>
      
      <guid>http://sunheqing.top/posts/javascript%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</guid>
      <description>JS的版本发展： JavaScript的版本最早是ES1.0，也叫ECMAScript，为什么是ES呢？
ECMAScript和JavaScript到底是什么关系？ 要讲清楚这个问题，需要回顾历史。1996年11月，JavaScript的创造者Netscape公司，决定将JavaScript提交给国际标准化组织ECMA，希望这种语言能够成为国际标准。次年，ECMA发布262号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为ECMAScript，这个版本就是1.0版。
该标准从一开始就是针对JavaScript语言制定的，但是之所以不叫JavaScript，有两个原因。一是商标，Java是Sun公司的商标，根据授权协议，只有Netscape公司可以合法地使用JavaScript这个名字，且JavaScript本身也已经被Netscape公司注册为商标。二是想体现这门语言的制定者是ECMA，不是Netscape，这样有利于保证这门语言的开放性和中立性。
因此，ECMAScript和JavaScript的关系是，前者是后者的规格，后者是前者的一种实现。
对待一门语言，我们要取其精华，去其糟粕！ 接下来我们介绍JS的基本语法
1.表达式和语句 表达式:
1+2; //表达式值为3 console.log(&#39;x&#39;); //表达式值为函数的返回值，undefined。 console.log //表达式值为函数本身  语句:
let a=1; //赋值，声明语句  区别：
 表达式一般都有值 语句会改变环境（声明，赋值）  js中空格是没有实际意义的，但是不能影响断句
js中回车也是没有意义的在return后面是不能加回车的，因为js会在return后面加undefined
2.标识符的规则  第一个字符，可以是Unicode字母或$或_或者是中文 第二个字符，除了上面所说的字符还可以是数字 单行注释：//;多行注释：/* 内容 */ 写注释要写好的注释，好的注释就是告诉读者我为什么要这样写，而不是滥多。  3.if&amp;hellip;else语句 语法：if（表达式）{语句1}else{语句2}
如果语句1或语句2只有一句，那么就可以省略{}，但是这样可能会造成一些bug，所以建议永远都不要省略{}。
问号冒号表达式： 语法：表达式1？表达式2：表达式3
(1&amp;gt;2)?a:b //执行b  判断表达式1，如果为true,执行表达式2，否则执行表达式3
&amp;amp;&amp;amp;短路逻辑 A&amp;amp;&amp;amp;B：如果A为true，执行B；A为false，执行A；即会取第一个假值
||短路逻辑 A||B：如果A为true，执行A；A为false，执行B；即会取第一个真值
4.while/for语句（循环语句） while的语法是：
while(表达式){语句}
 判断表达式的真假 当表达式为真，执行语句 当表达式为假，执行后面的语句 执行完再次判断表达式的真假  for循环：
for是while的语法糖，语法糖就是方便的写法
while干了什么？
var a=0 //初始化 while(a&amp;lt;5){ //判断 console.log(&#39;a&#39;) //循环体 i++ //增长 }  for的语法：</description>
    </item>
    
    <item>
      <title>JavaScript的诞生</title>
      <link>http://sunheqing.top/posts/javascript%E7%9A%84%E8%AF%9E%E7%94%9F/</link>
      <pubDate>Sat, 14 Sep 2019 21:30:41 +0800</pubDate>
      
      <guid>http://sunheqing.top/posts/javascript%E7%9A%84%E8%AF%9E%E7%94%9F/</guid>
      <description>JavaScript的历史 浏览器的诞生与JavaScript的密切联系  1993年，伊利诺伊大学厄巴纳-尚佩恩分校的国家超级计算机应用中心（NCSA）发表了NCSA Mosaic，这是最早流行的图形接口网页浏览器。   1994年，一家名为Mosaic Communications的公司在加州芒廷维尤成立了，并雇用了许多原来的NCSA Mosaic开发者用来开发Mosaic Netscape，该公司的目标是取代NCSA Mosaic成为世界第一的网页浏览器。第一个版本的网页浏览器Mosaic Netscape 0.9于1994年底发布。为避免NCSA的商标所有权问题，该浏览器于同年更名为Netscape Navigator（网景）。 网景预见到网络需要变得更动态。公司的创始人马克·安德森认为HTML需要一种胶水语言，让网页设计师和兼职程序员可以很容易地使用它来组装图片和插件之类的组件，且代码可以直接编写在网页标记中。 1995年，网景招募了布兰登·艾克，网景决定发明一种与Java搭配使用的辅助脚本语言并且语法上有些类似，这个决策导致排除了采用现有的语言，例如Perl、Python、Tcl或Scheme。为了在其他竞争提案中捍卫JavaScript这个想法，公司需要有一个可以运作的原型。艾克在1995年5月仅花了十天时间就把原型设计出来了（这就是JavaScript的第一版）。 最初命名为Mocha，1995年9月在Netscape Navigator 2.0的Beta版中改名为LiveScript，同年12月，Netscape Navigator 2.0 Beta 3中部署时被重命名为JavaScript。  ！所以JavaScript和Java是没有关系的
Brendan Eich（布兰登·艾克）  布兰登·艾克出生于1961年，是JavaScript主要创造者与架构师，曾任Mozilla公司的首席技术官，并曾短暂担任首席执行官。 1995年4月，网景公司录用了34岁的系统程序员Brendan Eich，Brendan Eich的主要方向和兴趣是函数式编程，网景公司招聘他的目的，是研究将Scheme语言作为网页脚本语言的可能性。Brendan Eich本人也是这样想的，以为进入新公司后，会主要与Scheme语言打交道。 仅仅一个月之后，1995年5月，网景公司做出决策，未来的网页脚本语言必须&amp;rdquo;看上去与Java足够相似&amp;rdquo;，但是比Java简单，使得非专业的网页作者也能很快上手。这个决策实际上将Perl、Python、Tcl、Scheme等非面向对象编程的语言都排除在外了。 不久后，Brendan Eich被指定为这种&amp;rdquo;简化版Java语言&amp;rdquo;的设计师。但是，他对Java一点兴趣也没有。为了应付公司安排的任务，他只用10天时间就把Javascript设计出来了。 由于设计时间太短，语言的一些细节考虑得不够严谨，导致后来很长一段时间，Javascript写出来的程序混乱不堪。  他的设计思路是这样的： （1）借鉴C语言的基本语法；
（2）借鉴Java语言的数据类型和内存管理；
（3）借鉴Scheme语言，将函数提升到&amp;rdquo;第一等公民&amp;rdquo;（first class）的地位；
（4）借鉴Self语言，使用基于原型（prototype）的继承机制。
它的优秀之处并非原创，它的原创之处并不优秀 这句话源自十八世纪英国文学家约翰逊博士，拿来形容JavaScript真是恰如其分，js有很多的问题，比许多编程语言的问题都要多很多。造成这种问题的原因就这么几点：
 设计时间太短，因为JavaScript是有布兰登10天设计出来的，很多细节做的不全面也是在所难免的了 没有先例，JavaScript是一门借鉴了函数式语言和面向对象语言的新语言，所以很多问题是没有参考的，只能靠程序员们慢慢发掘。 标准制定太早，由于历史原因JavaScript在设计出来一年的时候就进行了标准化制定，这就是的很多问题在没有得到及时更改的情况下就已经写进了标准。  Javascript的10个设计缺陷 1.不适合开发大型程序
2.非常小的标准库
3.null和undefined
两者区别很模糊，null一般表示数值的空，undefined表示对象的空
4.全局变量难以控制
5.自动插入行尾分号
JavaScript的定义是会在行尾自动插入分号，这样其实是不利于代码的编写
6.加号运算符
加号有两种用法，一直是将数值相加，另一种是作为连接符使用，这样其实使运算的复杂性提高
7.NaN
NaN是作为一个数值，表示该数值超出了解释器的理解，其又是一个不确定的数值，所以大大增加了解释器的负担
8.数组和对象的区分
9.== 和 ===
两者都表示等于，前者会自动转换类型，这样就会变声一些奇怪的结果，所以推荐一直使用“===”</description>
    </item>
    
    <item>
      <title>Css重点知识</title>
      <link>http://sunheqing.top/posts/css%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Thu, 12 Sep 2019 15:09:24 +0800</pubDate>
      
      <guid>http://sunheqing.top/posts/css%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86/</guid>
      <description>css简介 css就是层叠样式表(英文全称：Cascading Style Sheets)。它可以静态的修饰网页，css不仅可以将样式层叠起来，还可以配合各种脚本语言动态地对网页各元素进行格式化。css的创造在web历史上非常重要。
css的历史 1990年，李爵士发明了Web。1994年，Web真正走出实验室。从HTML被发明开始，样式就以各种形式存在。不同的浏览器结合它们各自的样式语言为用户提供页面效果的控制。最初的HTML只包含很少的显示属性。随着HTML的成长，为了满足页面设计者的要求，HTML添加了很多显示功能。但是随着这些功能的增加，HTML变的越来越杂乱，而且HTML页面也越来越臃肿。于是CSS便诞生了。他是由李爵士的同时赖先生（Hakon Wium Lie）提出的。1996年发表了css1，到目前为止已经发展到了css3。之后的版本的是分模块升级的。
css丰富的样式 CSS现在的功能非常强大，甚至可以制作动画，一个网页有很多元素，要有HTML、CSS等，然后经过浏览器渲染，才能展现出来我都可以认可的网页，所以CSS有着丰富的样式，这样才能满足我们用户的视觉需求。
浏览器渲染原理  根据HTML构建HTML树 根据css构建css树 将两棵树合并成一颗渲染树 layout布局（文档流，盒摸型，计算大小） paint绘制（把边框颜色，背景，阴影画出来） Composite合成（根据层叠关系展示画面）  css动画（例子:制作一颗小红心) 有两种方法:
 用transform,hover制作一颗小红心  transform示例
 用animation制作一颗小红心  animation示例
更新样式，一般用js更新样式 有三种更新方式：
 第一种（全走）  div.remove()，过程4，5，6都要走一遍
 第二种，跳过layout  改变背景颜色
 第三种，只需要composite  改变transform，只需改变composite</description>
    </item>
    
    <item>
      <title>初识URL</title>
      <link>http://sunheqing.top/posts/%E5%88%9D%E8%AF%86url/</link>
      <pubDate>Wed, 04 Sep 2019 14:58:15 +0800</pubDate>
      
      <guid>http://sunheqing.top/posts/%E5%88%9D%E8%AF%86url/</guid>
      <description>URL(统一资源定位符) URL:Uniform Resource Locator 或称统一资源定位器,最初是由蒂姆·伯纳斯-李发明用来作为万维网的地址,李爵士发明的万维网就是URL+HTML+HTTP，今天介绍一下 URL 内容。
URL 的内容 协议+域名+端口+路径+查询参数+锚点 协议： http 表示要通过 HTTP 协议来定位网络资源，http 就是协议，协议有很多，例如 FPS、HTTPs 等，协议码是什么就要严格遵守协议的内容。
域名（IP）： host 表示合法的因特网主机域名或者 IP 地址，www.imailtone.com 就是域名，所以域名就是 IP 的别称，域名能对应多个 IP，这取决于其域名有几个服务器。
端口号： port 用于表示在传输层上交换信息的进程端口号，http 协议默认端口号为 80，当然采用不同的协议默认端口号不同，https 协议的端口号就是 443。
路径： abs_path 指定请求资源的 URL，服务器上存放该资源的目录路径。
查询参数： ?query 可选，用于给动态网页传递参数，可以有多个参数，用“&amp;amp;”符号隔开，每个参数的键值之间用‘=’隔开，在百度中搜素一个信息是就是通过查询参数确定你所要查询的内容。
上图的 ?wd=URL 就是查询参数，说明我们要查询 URL。
锚点 #fragment 就是一个锚点，表示跳转到锚点位置。
这就是解析 URL 地址的过程
几个查询 ip 的命令：  ping xxxxx.com：就可以得到该域名的 IP。 IPconfig：查询自己的 IP。 nslookup xxxxx.com： 询问域名系统（这里指电信）该域名对应的 IP。  DNS 是什么？ 域名系统（英语：Domain Name System，缩写：DNS）是互联网的一项服务。它作为将域名和 IP 地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。DNS 使用 TCP 和 UDP 端口。当前，对于每一级域名长度的限制是 63 个字符，域名总长度则不能超过 253 个字符。</description>
    </item>
    
    <item>
      <title>HTML重点标签</title>
      <link>http://sunheqing.top/posts/html%E9%87%8D%E7%82%B9%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Sat, 31 Aug 2019 22:15:32 +0800</pubDate>
      
      <guid>http://sunheqing.top/posts/html%E9%87%8D%E7%82%B9%E6%A0%87%E7%AD%BE/</guid>
      <description>HTML 常用标签 几个很常用的标签 这里有几个常见的标签给大家介绍一下：
a/img/iframe/table
a 标签 &amp;lt;a href=&amp;quot;http//:google.com&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;  a 标签的作用是：  跳转到一个外部页面； 跳转到内部锚点（锚点就是跳转到具有 id 属性的标签位置，在 id 前加#即可）； 跳转到邮箱或电话；  a 标签的属性：  href:超链接，链接到一个网页。 target：意思是在那个在哪一个窗口打开超链接，有 4 个值；   _blank：在新的页面打开 _self：在当前页面打开 _top：在顶层页面打开 _parent：在父级页面打开   download:不是打开网页，而是下载网页 rel=noopener:阻止将引用着信息传递给新选项卡，可以防止网站进行跨站点的恶意攻击，提高安全性  注意：如果想要点击 a 标签，网页什么也不做只是刷新一次，只有将 href 属性设置为 js 伪协议
iframe 标签： iframe 标签是一个内联框架元素，他能将另一个 HTML 页面嵌入到当前页面中
这就是在网页中嵌套了一个 iframe，红色区域就是一个 iframe 窗口
table 标签 结构：
&amp;lt;table&amp;gt; &amp;lt;thead&amp;gt;&amp;lt;/thead&amp;gt; &amp;lt;tbody&amp;gt;&amp;lt;/tbody&amp;gt; &amp;lt;tfoot&amp;gt;&amp;lt;/tfoot&amp;gt; &amp;lt;/table&amp;gt;  三个标签与顺序无关，总是 thead 的内容在上，tfoot 内容在下。</description>
    </item>
    
    <item>
      <title>HTML入门笔记1</title>
      <link>http://sunheqing.top/posts/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01/</link>
      <pubDate>Thu, 22 Aug 2019 14:48:02 +0800</pubDate>
      
      <guid>http://sunheqing.top/posts/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01/</guid>
      <description> HTML 入门 HTML 是谁发明的？ 蒂莫西·约翰·伯纳斯-李爵士，英国计算机科学家。他是万维网的发明者，1990 年 12 月 25 日，他成功利用互联网实现了超文本传输协议客户端与服务器的第一次通讯
HTML 起手应该写什么 一个完整的起手式：
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;  开头写的东西，DOCTYPE 就是文档类型的意思，这里的文档类型就是 html。lang 是语言，这里是英文， 如果想改成汉字就将“en”改为“zh-CN”。
&amp;lt;meta charset=&amp;quot;UTF-8&amp;quot; /&amp;gt;  文件字符编码为“UTF-8”
&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot; /&amp;gt;  禁用缩放，兼容手机。
&amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;ie=edge&amp;quot; /&amp;gt;  告诉 IE 使用最新内核。
&amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;  title 中为文档的标题。
常用的表章节的标签 h1——h6/section/article/main/aside/p/ h1——h6 是标题标签。h1 最大，h6 最小，他们是自动加黑加粗的。
section 是章节标签，main 标签里面放主要内容，aside 标签里面放旁支内容，article 使文章标签，这些标签都是章节标签。
HTML 的全局属性 class/contenteditable/hidden/id/style/tabindex/title  class 创建一个类名 contenteditable 可以让一个标签被编辑 hidden 隐藏 id 创建一个 id，不要轻易用它（浏览器无法识别 id 的唯一性） style 样式 tabindex 按下 tab 时跳转的位置（可交互的内容），赋值为顺序，为 0 时最后访问，为-1 时不访问。 title 标题  常用的内容标签 a/strong/em/code/pre  a 链接 strong 重要 em 强调 code 代码（里面的内容是等宽的） pre 可以保留你的输入，浏览器将连续空白视为一个空格，用 pre 可以避免这种情况。  </description>
    </item>
    
    <item>
      <title>开博大吉</title>
      <link>http://sunheqing.top/posts/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</link>
      <pubDate>Mon, 19 Aug 2019 00:16:43 +0800</pubDate>
      
      <guid>http://sunheqing.top/posts/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</guid>
      <description>大家好 我的博客开通了，希望能写出好文章给大家看。</description>
    </item>
    
    <item>
      <title>如何搭建一篇博客</title>
      <link>http://sunheqing.top/posts/%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/</link>
      <pubDate>Sun, 11 Aug 2019 11:39:57 +0800</pubDate>
      
      <guid>http://sunheqing.top/posts/%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/</guid>
      <description> 在hugo上搭建博客 终于开始写博客啦，就写写怎么搭建一个hugo博客吧  想要在hugo上搭建一篇博客，首先你要会使用github，因为我们需要GitHub Pages 来托管我们的静态页面。 当你会使用GitHub之后，进入hugo官网，按照官网的快速步骤执行，这里就不赘述了。要注意的是，如果你的网速不好，可能在git中下载不下来主题，可以直接下载zip文件放到你博客编辑目录下的themes目录内，再进入config.toml配置。 搭建博客的过程中回到很多问题，我也是一个新手，每个问题都要根据提示查询并思考，以后的学习中也应该是这样，欢迎大家来搭建hugo博客。  几个可能用到的网址：
 https://gohugo.io/getting-started/quick-start/ https://github.com/  </description>
    </item>
    
  </channel>
</rss>